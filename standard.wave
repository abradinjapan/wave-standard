[
    Files Required:
    [ none ]
]

[
    General
]

general.character.size()(bytes) = {
    wave.set(wave.integer.1)(bytes)
}

general.address.size()(bytes) = {
    wave.set(wave.integer.8)(bytes)
}

general.u8.size()(bytes) = {
    wave.set(wave.integer.1)(bytes)
}

general.u16.size()(bytes) = {
    wave.set(wave.integer.2)(bytes)
}

general.u24.size()(bytes) = {
    wave.set(wave.integer.3)(bytes)
}

general.u32.size()(bytes) = {
    wave.set(wave.integer.4)(bytes)
}

general.u40.size()(bytes) = {
    wave.set(wave.integer.5)(bytes)
}

general.u48.size()(bytes) = {
    wave.set(wave.integer.6)(bytes)
}

general.u56.size()(bytes) = {
    wave.set(wave.integer.7)(bytes)
}

general.u64.size()(bytes) = {
    wave.set(wave.integer.8)(bytes)
}

[
    Buffer
]

[ copy one buffer to another buffer of the same size ]
buffer.copy.same_size(old.start old.end new.start new.end)(error) = {
    [ setup variables ]
    wave.set(wave.integer.1)(adjust)
    wave.set(wave.integer.1)(byte_size)
    wave.set(wave.integer.1)(always)
    wave.set(wave.integer.0)(error)

    [ calculate sizes ]
    wave.integer.subtract(old.end old.start)(old.size)
    wave.integer.add(old.size adjust)(old.size)
    wave.integer.subtract(new.end new.start)(new.size)
    wave.integer.add(new.size adjust)(new.size)

    [ check for equivalent sizes ]
    wave.integer.within_range(old.size new.size old.size)(same_size)
    wave.boolean.not(same_size)(different_size)
    wave.jump(different_size @return_error)()

    [ copy old buffer to new buffer ]
    [ setup currents ]
    wave.copy(old.start)(old.current)
    wave.copy(new.start)(new.current)

    [ setup loop start offset ]
    @copy_loop.start

    [ check if currents are within the buffer range ]
    wave.integer.within_range(old.start old.current old.end)(in_range)
    wave.boolean.not(in_range)(out_of_range)
    wave.jump(out_of_range @return)()
    wave.integer.within_range(new.start new.current new.end)(in_range)
    wave.boolean.not(in_range)(out_of_range)
    wave.jump(out_of_range @return)()

    [ get byte to copy ]
    wave.address_to_cell(old.current byte_size)(temp error)

    [ jump if error ]
    wave.jump(error @return_error)()

    [ copy byte ]
    wave.cell_to_address(temp byte_size new.current)(error)

    [ jump if error ]
    wave.jump(error @return_error)()

    [ advance currents ]
    wave.integer.add(old.current byte_size)(old.current)
    wave.integer.add(new.current byte_size)(new.current)

    [ return to loop start ]
    wave.jump(always @copy_loop.start)()

    [ setup error return ]
    @return_error

    [ set error ]
    wave.set(wave.integer.1)(error)

    [ DEBUG ]
    wave.print.number(error)()

    [ setup function return ]
    @return
}

[ calculate buffer size ]
buffer.calculate.size(start end)(length) = {
    [ setup array size adjust ]
    wave.set(wave.integer.1)(adjust)

    [ perform calculation ]
    wave.integer.subtract(end start)(length)
    wave.integer.add(length adjust)(length)
}

[
    Strings
]

string.print.new_line()() = {
    wave.set(wave.integer.10)(new_line)
    wave.print.character(new_line)()
}

string.print.space()() = {
    wave.set(wave.integer.32)(space)
    wave.print.character(space)()
}

string.print.tab()() = {
    wave.set(wave.integer.9)(tab)
    wave.print.character(tab)()
}

string.print(start end)() = {
    [ setup variables ]
    wave.set(wave.integer.1)(character_size)
    wave.set(wave.integer.1)(always)

    [ setup current ]
    wave.copy(start)(current)

    [ loop start ]
    @print_character

    [ check if loop should quit ]
    wave.integer.within_range(start current end)(continue)
    wave.boolean.not(continue)(quit)
    wave.jump(quit @exit)()

    [ get character ]
    wave.address_to_cell(current character_size)(character error)

    [ next character ]
    wave.integer.add(current character_size)(current)

    [ print character ]
    wave.print.character(character)()

    [ jump to loop start ]
    wave.jump(always @print_character)()

    [ loop end ]
    @exit

    [ print new line ]
    string.print.new_line()()
}

[
    List
]

list.offset.buffer_address_start()(value) = {
    wave.set(wave.integer.0)(value)
}

list.offset.buffer_address_end()(value) = {
    wave.set(wave.integer.8)(value)
}

list.offset.buffer_filled_index()(value) = {
    wave.set(wave.integer.16)(value)
}

list.offset.buffer_increase()(value) = {
    wave.set(wave.integer.24)(value)
}

list.offset.total_size()(value) = {
    wave.set(wave.integer.32)(value)
}

list.size.buffer_address_start()(value) = {
    general.u64.size()(value)
}

list.size.buffer_address_end()(value) = {
    general.u64.size()(value)
}

list.size.buffer_filled_index()(value) = {
    general.u64.size()(value)
}

list.size.buffer_increase()(value) = {
    general.u64.size()(value)
}

list.set.buffer_address_start(list.start value)() = {
    [ setup variables ]
    list.size.buffer_address_start()(byte_size)

    [ perform write ]
    wave.cell_to_address(value byte_size list.start)(error)
}

list.set.buffer_address_end(list.start value)() = {
    [ setup variables ]
    list.offset.buffer_address_end()(offset)
    list.size.buffer_address_end()(byte_size)

    [ calculate address ]
    wave.integer.add(list.start offset)(write_address)

    [ perform write ]
    wave.cell_to_address(value byte_size write_address)(error)
}

list.set.buffer_filled_index(list.start value)() = {
    [ setup variables ]
    list.offset.buffer_filled_index()(offset)
    list.size.buffer_filled_index()(byte_size)

    [ calculate address ]
    wave.integer.add(list.start offset)(write_address)

    [ perform write ]
    wave.cell_to_address(value byte_size write_address)(error)
}

list.set.buffer_increase(list.start value)() = {
    [ setup variables ]
    list.offset.buffer_increase()(offset)
    list.size.buffer_increase()(byte_size)

    [ calculate address ]
    wave.integer.add(list.start offset)(write_address)

    [ perform write ]
    wave.cell_to_address(value byte_size write_address)(error)
}

list.get.buffer_address_start(list.start)(value) = {
    [ setup variables ]
    list.size.buffer_address_start()(byte_size)

    [ perform read ]
    wave.address_to_cell(list.start byte_size)(value error)
}

list.get.buffer_address_end(list.start)(value) = {
    [ setup variables ]
    list.size.buffer_address_end()(byte_size)
    list.offset.buffer_address_end()(offset)

    [ calculate address ]
    wave.integer.add(list.start offset)(read_address)

    [ perform read ]
    wave.address_to_cell(read_address byte_size)(value error)
}

list.get.buffer_filled_index(list.start)(value) = {
    [ setup variables ]
    list.size.buffer_filled_index()(byte_size)
    list.offset.buffer_filled_index()(offset)

    [ calculate address ]
    wave.integer.add(list.start offset)(read_address)

    [ perform read ]
    wave.address_to_cell(read_address byte_size)(value error)
}

list.get.buffer_increase(list.start)(value) = {
    [ setup variables ]
    list.size.buffer_increase()(byte_size)
    list.offset.buffer_increase()(offset)

    [ calculate address ]
    wave.integer.add(list.start offset)(read_address)

    [ perform read ]
    wave.address_to_cell(read_address byte_size)(value error)
}

[ print list data DEBUG ]
list.debug.print(list.start list.end)() = {
    [ print address start ]
    string.print.tab()()
    list.get.buffer_address_start(list.start)(value)
    wave.print.number(value)()
    string.print.new_line()()

    [ print address end ]
    string.print.tab()()
    list.get.buffer_address_end(list.start)(value)
    wave.print.number(value)()
    string.print.new_line()()

    [ print index filled ]
    string.print.tab()()
    list.get.buffer_filled_index(list.start)(value)
    wave.print.number(value)()
    string.print.new_line()()

    [ print address increase ]
    string.print.tab()()
    list.get.buffer_increase(list.start)(value)
    wave.print.number(value)()
    string.print.new_line()()
}

[ create a list ]
list.create(increase)(list.start list.end error) = {
    [ A list is an object that dynamically resizes based on the amount of data present. ]
    [ There are 4 fields: ]
    [ 1: buffer address start, the start of the buffer ]
    [ 2: buffer address end, the end of the buffer ]
    [ 3: buffer filled index, the index at the top of the amount of data in the buffer ]
    [ 4: buffer increase, the amount of bytes that the list should increase by when out of room ]

    [ setup variables ]
    list.offset.total_size()(list.object.size)
    wave.set(wave.integer.0)(filled)

    [ allocate object ]
    wave.request_memory(list.object.size)(list.start list.end error)

    [ quit if error ]
    wave.jump(error @return)()

    [ allocate data buffer ]
    wave.request_memory(increase)(data.start data.end error)

    [ quit if error ]
    wave.jump(error @return)()

    [ setup blank list ]
    list.set.buffer_address_start(list.start data.start)()
    list.set.buffer_address_end(list.start data.end)()
    list.set.buffer_filled_index(list.start filled)()
    list.set.buffer_increase(list.start increase)()

    [ exit function ]
    @return
}

[ destroy a list ]
list.destroy(list.start list.end)() = {
    [ get the data buffer ]
    list.get.buffer_address_start(list.start)(data.start)
    list.get.buffer_address_end(list.start)(data.end)

    [ free the data buffer ]
    wave.return_memory(data.start data.end)()

    [ free the list buffer ]
    wave.return_memory(list.start list.end)()
}

list.expand(list.start)(error) = {
    [ write pointer size adjustment ]
    wave.set(wave.integer.1)(adjust)
    wave.set(wave.integer.1)(always)

    [ get old list addresses ]
    list.get.buffer_address_start(list.start)(old.start)
    list.get.buffer_address_end(list.start)(old.end)

    [ get increase ]
    list.get.buffer_increase(list.start)(increase)

    [ calculate new list size ]
    wave.integer.subtract(old.end old.start)(old.size)
    wave.integer.add(old.size adjust)(old.size)
    wave.integer.add(old.size increase)(new.size)

    [ allocate new list ]
    wave.request_memory(new.size)(new.start new.end error)

    [ quit if error ]
    wave.jump(error @exit_error)()

    [ setup new list copy address ]
    wave.integer.add(new.start old.size)(new.old.end)
    wave.integer.subtract(new.old.end adjust)(new.old.end)

    [ copy old list to new list ]
    buffer.copy.same_size(old.start old.end new.start new.old.end)(error)

    [ exit if error ]
    wave.jump(error @exit_error)()

    [ destroy the old list ]
    wave.return_memory(old.start old.end)()

    [ replace old list addresses with new list addresses ]
    list.set.buffer_address_start(list.start new.start)()
    list.set.buffer_address_end(list.start new.end)()

    [ jump to return ]
    wave.jump(always @exit)()

    [ error exit offset ]
    @exit_error

    [ destroy new allocation if not copied ]
    wave.return_memory(new.start new.end)()

    [ exit ]
    @exit
}

[ add data to the list ]
list.append(list.start data byte_size)(error) = {
    [ setup variables ]
    wave.set(wave.integer.1)(always)
    wave.set(wave.integer.1)(adjust)

    [ make sure enough room is present to write data ]
    [ setup allocation loop offset ]
    @expand_loop.start

    [ update list variables ]
    list.get.buffer_address_start(list.start)(buffer_address_start)
    list.get.buffer_address_end(list.start)(buffer_address_end)
    list.get.buffer_filled_index(list.start)(buffer_filled_index)

    [ setup the list filled addresses ]
    wave.integer.add(buffer_address_start buffer_filled_index)(buffer_write_address)
    wave.integer.subtract(buffer_write_address adjust)(buffer_filled_address)
    wave.integer.add(buffer_filled_address byte_size)(new.buffer_filled_address)

    [ if the new buffer filled address is greater than the list buffer end, jump to the write ]
    wave.integer.within_range(buffer_address_start new.buffer_filled_address buffer_address_end)(in_buffer_range)
    wave.jump(in_buffer_range @write_data)()

    [ if the new address is out of range, expand it ]
    list.expand(list.start)(error)

    [ DEBUG ]
    string.print.tab()()
    wave.print.number(buffer_address_start)()
    string.print.space()()
    wave.print.number(buffer_address_end)()
    string.print.space()()
    wave.integer.subtract(buffer_address_end buffer_address_start)(bytes)
    wave.integer.add(bytes adjust)(bytes)
    wave.print.number(bytes)()
    string.print.new_line()()

    [ leave function if error ]
    wave.jump(error @return)()

    [ always go back to expand loop start ]
    wave.jump(always @expand_loop.start)()

    [ setup writing data offset ]
    @write_data

    [ write data ]
    wave.cell_to_address(data byte_size buffer_write_address)(error)

    [ update list data ]
    wave.integer.add(buffer_filled_index byte_size)(new.buffer_filled_index)
    list.set.buffer_filled_index(list.start new.buffer_filled_index)()

    [ return ]
    @return
}

[
    Code
]

[ setup first pass ]
code.write_instruction.setup_pass.measure()(output.current do_write) = {
    [ setup information ]
    wave.set(wave.integer.0)(output.current)
    wave.set(wave.boolean.false)(do_write)
}

[ setup second pass ]
code.write_instruction.setup_pass.build(program_size)(program.start program.end output.current do_write error) = {
    [ perform allocation ]
    wave.request_memory(program_size)(program.start program.end error)

    [ setup remaining outputs ]
    wave.copy(program.start)(output.current)
    wave.set(wave.boolean.true)(do_write)
}

[ write any instruction ]
code.write_instruction(input.current do_write opcode write_register_value input_0 input_1 input_2 input_3 output_0 output_1 output_2 jump_instruction_ID)(output.current error) = {
    [ jump to end if not doing write ]
    wave.boolean.not(do_write)(skip_write)
    wave.jump(skip_write @advance_current)()

    [ setup offsets ]
    wave.set(wave.instruction.opcode.offset)(opcode.offset)
    wave.set(wave.instruction.write_register_value.offset)(write_register_value.offset)
    wave.set(wave.instruction.input_0.offset)(input_0.offset)
    wave.set(wave.instruction.input_1.offset)(input_1.offset)
    wave.set(wave.instruction.input_2.offset)(input_2.offset)
    wave.set(wave.instruction.input_3.offset)(input_3.offset)
    wave.set(wave.instruction.output_0.offset)(output_0.offset)
    wave.set(wave.instruction.output_1.offset)(output_1.offset)
    wave.set(wave.instruction.output_2.offset)(output_2.offset)
    wave.set(wave.instruction.jump_instruction_ID.offset)(jump_instruction_ID.offset)

    [ setup byte sizes ]
    wave.set(wave.instruction.opcode.size)(opcode.size)
    wave.set(wave.instruction.write_register_value.size)(write_register_value.size)
    wave.set(wave.instruction.input_0.size)(input_0.size)
    wave.set(wave.instruction.input_1.size)(input_1.size)
    wave.set(wave.instruction.input_2.size)(input_2.size)
    wave.set(wave.instruction.input_3.size)(input_3.size)
    wave.set(wave.instruction.output_0.size)(output_0.size)
    wave.set(wave.instruction.output_1.size)(output_1.size)
    wave.set(wave.instruction.output_2.size)(output_2.size)
    wave.set(wave.instruction.jump_instruction_ID.size)(jump_instruction_ID.size)

    [ calculate write addresses ]
    wave.integer.add(input.current opcode.offset)(opcode.write_address)
    wave.integer.add(input.current write_register_value.offset)(write_register_value.write_address)
    wave.integer.add(input.current input_0.offset)(input_0.write_address)
    wave.integer.add(input.current input_1.offset)(input_1.write_address)
    wave.integer.add(input.current input_2.offset)(input_2.write_address)
    wave.integer.add(input.current input_3.offset)(input_3.write_address)
    wave.integer.add(input.current output_0.offset)(output_0.write_address)
    wave.integer.add(input.current output_1.offset)(output_1.write_address)
    wave.integer.add(input.current output_2.offset)(output_2.write_address)
    wave.integer.add(input.current jump_instruction_ID.offset)(jump_instruction_ID.write_address)

    [ perform writes ]
    wave.cell_to_address(opcode opcode.size opcode.write_address)(error)
    wave.cell_to_address(write_register_value write_register_value.size write_register_value.write_address)(error)
    wave.cell_to_address(input_0 input_0.size input_0.write_address)(error)
    wave.cell_to_address(input_1 input_1.size input_1.write_address)(error)
    wave.cell_to_address(input_2 input_2.size input_2.write_address)(error)
    wave.cell_to_address(input_3 input_3.size input_3.write_address)(error)
    wave.cell_to_address(output_0 output_0.size output_0.write_address)(error)
    wave.cell_to_address(output_1 output_1.size output_1.write_address)(error)
    wave.cell_to_address(output_2 output_2.size output_2.write_address)(error)
    wave.cell_to_address(jump_instruction_ID jump_instruction_ID.size jump_instruction_ID.write_address)(error)

    [ advance current ]
    @advance_current
    wave.set(wave.instruction.size)(instruction.size)
    wave.integer.add(input.current instruction.size)(output.current)

    [ return ]
    @return
}

[ write the quit instruction ]
code.write_instruction.quit(input.current do_write)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.quit)(opcode)
    wave.set(wave.integer.0)(unused)
    
    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused unused unused unused unused unused unused unused unused)(output.current error)
}

[ write the write_cell instruction ]
code.write_instruction.write_cell(input.current do_write value destination)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.write_cell)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode value unused unused unused unused destination unused unused unused)(output.current error)
}

[ write the copy_cell instruction ]
code.write_instruction.copy_cell(input.current do_write source destination)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.copy_cell)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused source unused unused unused destination unused unused unused)(output.current error)
}

[ write the copy_string instruction ]
code.write_instruction.copy_string(input.current do_write string_ID destination_start destination_end error_code)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.copy_string)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused string_ID unused unused unused destination_start destination_end unused unused)(output.current error)
}

[ write the print_cell_as_number instruction ]
code.write_instruction.print_cell_as_number(input.current do_write source)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.print_cell_as_number)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused source unused unused unused unused unused unused unused)(output.current error)
}

[ write the print_cell_as_character instruction ]
code.write_instruction.print_cell_as_character(input.current do_write source)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.print_cell_as_character)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused source unused unused unused unused unused unused unused)(output.current error)
}

[ write the get_console_input instruction ]
code.write_instruction.get_console_input(input.current do_write buffer.start buffer.end)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.get_console_input)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused unused unused unused unused buffer.start buffer.end unused unused)(output.current error)
}

[ write the create_new_context instruction ]
code.write_instruction.create_new_context(input.current do_write cell_count)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.create_new_context)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode cell_count unused unused unused unused unused unused unused unused)(output.current error)
}

[ write the restore_old_context instruction ]
code.write_instruction.restore_old_context(input.current do_write)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.restore_old_context)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused unused unused unused unused unused unused unused unused)(output.current error)
}

[ write the pass_input instruction ]
code.write_instruction.pass_input(input.current do_write cell)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.pass_input)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused cell unused unused unused unused unused unused unused)(output.current error)
}

[ write the get_input instruction ]
code.write_instruction.get_input(input.current do_write cell)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.get_input)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused unused unused unused unused cell unused unused unused)(output.current error)
}

[ write the pass_output instruction ]
code.write_instruction.pass_output(input.current do_write cell)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.pass_output)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused cell unused unused unused unused unused unused unused)(output.current error)
}

[ write the get_output instruction ]
code.write_instruction.get_output(input.current do_write cell)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.get_output)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused unused unused unused unused cell unused unused unused)(output.current error)
}

[ write the jump_to_abstraction instruction ]
code.write_instruction.jump_to_abstraction(input.current do_write destination_instruction)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.jump_to_abstraction)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused destination_instruction unused unused unused unused unused unused unused)(output.current error)
}

[ write the jump_from_abstraction instruction ]
code.write_instruction.jump_from_abstraction(input.current do_write)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.jump_from_abstraction)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused unused unused unused unused unused unused unused unused)(output.current error)
}

[ write the jump instruction ]
code.write_instruction.jump(input.current do_write condition jump_instruction_ID)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.jump)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused condition unused unused unused unused unused unused jump_instruction_ID)(output.current error)
}

[ write the get_instruction_index instruction ]
code.write_instruction.get_instruction_index(input.current do_write destination)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.get_instruction_index)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused unused unused unused unused destination unused unused unused)(output.current error)
}

[ write the request_memory instruction ]
code.write_instruction.request_memory(input.current do_write length buffer.start buffer.end error.destination)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.request_memory)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused length unused unused unused buffer.start buffer.end error.destination unused)(output.current error)
}

[ write the return_memory instruction ]
code.write_instruction.return_memory(input.current do_write buffer.start buffer.end)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.return_memory)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused buffer.start buffer.end unused unused unused unused unused unused)(output.current error)
}

[ write the cell_to_address instruction ]
code.write_instruction.cell_to_address(input.current do_write source_cell byte_size destination_address error.destination)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.cell_to_address)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused source_cell byte_size destination_address unused error.destination unused unused unused)(output.current error)
}

[ write the address_to_cell instruction ]
code.write_instruction.address_to_cell(input.current do_write source_address byte_size destination_cell error.destination)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.address_to_cell)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused source_address byte_size unused unused destination_cell error.destination unused unused)(output.current error)
}

[ write the buffer_to_file instruction ]
code.write_instruction.buffer_to_file(input.current do_write buffer.start buffer.end file_path.start file_path.end error.destination)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.buffer_to_file)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused buffer.start buffer.end file_path.start file_path.end error.destination unused unused unused)(output.current error)
}

[ write the file_to_buffer instruction ]
code.write_instruction.file_to_buffer(input.current do_write file_path.start file_path.end buffer.start buffer.end error.destination)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.file_to_buffer)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused file_path.start file_path.end unused unused buffer.start buffer.end error.destination unused)(output.current error)
}

[ write the integer_add instruction ]
code.write_instruction.integer_add(input.current do_write source_1 source_2 destination)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.integer_add)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused source_1 source_2 unused unused destination unused unused unused)(output.current error)
}

[ write the integer_subtract instruction ]
code.write_instruction.integer_subtract(input.current do_write source_1 source_2 destination)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.integer_subtract)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused source_1 source_2 unused unused destination unused unused unused)(output.current error)
}

[ write the integer_multiply instruction ]
code.write_instruction.integer_multiply(input.current do_write source_1 source_2 destination)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.integer_multiply)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused source_1 source_2 unused unused destination unused unused unused)(output.current error)
}

[ write the integer_divide instruction ]
code.write_instruction.integer_divide(input.current do_write source_1 source_2 destination error.destination)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.integer_divide)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused source_1 source_2 unused unused destination error.destination unused unused)(output.current error)
}

[ write the integer_modulous instruction ]
code.write_instruction.integer_modulous(input.current do_write source_1 source_2 destination error.destination)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.integer_modulous)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused source_1 source_2 unused unused destination error.destination unused unused)(output.current error)
}

[ write the integer_within_range instruction ]
code.write_instruction.integer_within_range(input.current do_write low_bound value high_bound destination)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.integer_within_range)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused low_bound value high_bound unused destination unused unused unused)(output.current error)
}

[ write the boolean_not instruction ]
code.write_instruction.boolean_not(input.current do_write source destination)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.boolean_not)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused source unused unused unused destination unused unused unused)(output.current error)
}

[ write the get_context_input instruction ]
code.write_instruction.get_context_input(input.current do_write destination.start destination.end)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.get_context_input)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused unused unused unused unused destination.start destination.end unused unused)(output.current error)
}

[ write the pass_context_output instruction ]
code.write_instruction.pass_context_output(input.current do_write source.start source.end)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.pass_context_output)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused source.start source.end unused unused unused unused unused unused)(output.current error)
}

[ write the run instruction ]
code.write_instruction.run(input.current do_write program.start program.end input.start input.end result.start result.end runner_error.destination)(output.current error) = {
    [ setup variables ]
    wave.set(wave.instruction.opcode.run)(opcode)
    wave.set(wave.integer.0)(unused)

    [ write instruction ]
    code.write_instruction(input.current do_write opcode unused program.start program.end input.start input.end result.start result.end runner_error.destination unused)(output.current error)
}
